name: Deploy to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-3
  AWS_ACCOUNT_ID: 311535938619

permissions:
  id-token: write
  contents: read

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/frontend

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
        env:
          VITE_API_URL: https://chitchaat-backend.pauldejean.dev

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::311535938619:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: |
          aws s3 sync ./dist s3://chitchaat-frontend-source-code

  build_backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/backend

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::311535938619:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('packages/backend/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Copy package-lock.json
        run: cp ./package-lock.json ./packages/backend/
        working-directory: .

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}/packages/backend
          push: true
          tags: |
            311535938619.dkr.ecr.eu-west-3.amazonaws.com/chitchaat:${{ github.sha }}
            311535938619.dkr.ecr.eu-west-3.amazonaws.com/chitchaat:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  deploy_backend:
    runs-on: ubuntu-latest
    needs: build_backend
    environment: chitchaat
    defaults:
      run:
        working-directory: packages/backend
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::311535938619:role/GithubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3

      # Terraform steps (adjust working-directory if your Terraform files are elsewhere)
      - name: Terraform Init
        run: terraform init
        working-directory: infrastructure

      - name: Echo Selected Environment Variables
        run: |
          echo "apitoken: $TF_VAR_cloudflare_api_token"
          echo "region: $TF_VAR_aws_region"
          echo "zoneid: $TF_VAR_cloudflare_zone_id"
          echo "TF_VAR_frontend_domain_name: $TF_VAR_frontend_domain_name"
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_frontend_domain_name: ${{ vars.FRONTEND_DOMAIN_NAME }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: infrastructure
        env:
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_frontend_domain_name: ${{ vars.FRONTEND_DOMAIN_NAME }}

      - name: Capture Terraform Outputs
        id: tf_output
        run: |
          echo "INSTANCE_ID=$(terraform output -raw instance_id)" >> $GITHUB_ENV
          echo "IPV4=$(terraform output -raw instance_public_ipv4)" >> $GITHUB_ENV
          echo "IPV6=$(terraform output -raw instance_public_ipv6)" >> $GITHUB_ENV
        working-directory: infrastructure

      - name: Update docker container
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --document-version "1" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"$INSTANCE_ID\"]}]" \
            --parameters "{\"workingDirectory\":[\"\"],\"executionTimeout\":[\"3600\"],\"commands\":[
              \"aws ecr get-login-password --region eu-west-3 | docker login --username AWS --password-stdin 311535938619.dkr.ecr.eu-west-3.amazonaws.com\",
              \"docker pull 311535938619.dkr.ecr.eu-west-3.amazonaws.com/chitchaat:${{ github.sha }}\",
              \"docker ps -aq --filter name=backend | xargs -r docker stop\",
              \"docker ps -aq --filter name=backend | xargs -r docker rm\",
              \"docker run --name backend -d -p 80:3001 -p 10000-10100:10000-10100/udp -e MEDIASOUP_ANNOUNCED_IPV6_ADDRESS=\\\"$IPV6\\\" -e MEDIASOUP_ANNOUNCED_IPV4_ADDRESS=\\\"$IPV4\\\" 311535938619.dkr.ecr.eu-west-3.amazonaws.com/chitchaat:${{ github.sha }}\",
              \"docker image prune -a -f\"
            ]}" \
            --timeout-seconds 600 \
            --max-concurrency "50" \
            --max-errors "0" \
            --region $AWS_REGION
